{
  "openapi": "3.0.1",
  "info": {
    "title": "Open Food Trust Trace API",
    "description": "The OFT Trace API enables users to create, read, update, and delete trace information for their entity's food supply chain events, transactions, products and facilities.",
    "contact": {},
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "//mesur.io/oft/api/trace/v1"
    }
  ],
  "tags": [
    {
      "name": "Products",
      "description": "APIs for products"
    },
    {
      "name": "Locations",
      "description": "APIs for locations"
    },
    {
      "name": "Metadata",
      "description": "APIS for metadata"
    },
    {
      "name": "Events",
      "description": "APIs for events"
    },
    {
      "name": "Assets",
      "description": "APIs for assets"
    },
    {
      "name": "Entities",
      "description": "APIs for entities"
    },
    {
      "name": "Sources",
      "description": "APIs for sources"
    }
  ],
  "paths": {
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Retrieves product information",
        "description": "Retrieves product information",
        "operationId": "get_products",
        "parameters": [
          {
            "name": "entity_id[]",
            "in": "query",
            "description": "Array of entity IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "description",
            "in": "query",
            "description": "A general search string used to return matching product data.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id[]",
            "in": "query",
            "description": "An array of asset IDs, such as lots and serials.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used via the `startPage` parameter for futher retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "400": {
            "description": "Bad Input Parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Creates a new product",
        "description": "Creates a new product",
        "operationId": "post_products",
        "requestBody": {
          "description": "Request body with the parameters for product post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productsPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/products/{product_id}": {
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Updates an existing product",
        "description": "Updates an existing product",
        "operationId": "put_products",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {}
          }
        ],
        "requestBody": {
          "description": "Request body with updates to the product entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productsPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/products"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a product",
        "description": "Deletes the product from the system.",
        "operationId": "delete_products",
        "parameters": [
          {
            "name": "product_id",
            "in": "path",
            "description": "Product ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/locations": {
      "get": {
        "tags": [
          "Locations"
        ],
        "summary": "get_locations",
        "description": "Retrieves information on the facility location",
        "operationId": "get_locations",
        "parameters": [
          {
            "name": "entity_id[]",
            "in": "query",
            "description": "Array of entity IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "location_id[]",
            "in": "query",
            "description": "An array of location IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used for further retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Locations"
        ],
        "summary": "Creates a new location entry.",
        "description": "Creates a new location entry.",
        "operationId": "post_locations",
        "requestBody": {
          "description": "Parameters of the location to post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/locationsPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/location/{location_id}": {
      "put": {
        "tags": [
          "Locations"
        ],
        "summary": "Updates an existing location",
        "description": "Updates an existing location",
        "operationId": "put_locations",
        "requestBody": {
          "description": "Parameters of the location to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/locationsPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/locations"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Locations"
        ],
        "summary": "Deletes a location",
        "description": "Deletes the location from the system.",
        "operationId": "delete_locations",
        "parameters": [
          {
            "name": "location_id",
            "in": "path",
            "description": "Location ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/metadata": {
      "get": {
        "tags": [
          "Metadata"
        ],
        "summary": "get_metadata",
        "description": "Retrieves metadata related to items such as products, locations, etc.",
        "operationId": "get_metadata",
        "parameters": [
          {
            "name": "metadata_id[]",
            "in": "query",
            "description": "Array of IDs for metadata.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "entity_id[]",
            "in": "query",
            "description": "Array of entity IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "location_id[]",
            "in": "query",
            "description": "An array of location IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event_id[]",
            "in": "query",
            "description": "Array of event identifiers.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "metadata_start_timestamp",
            "in": "query",
            "description": "Returns records with a payload timestamp on or after the timestamp provided",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "metadata_end_timestamp",
            "in": "query",
            "description": "Returns records with a payload timestamp strictly before the timestamp provided",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used for further retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Metadata"
        ],
        "summary": "Creates a new metadata entry.",
        "description": "Creates a new metadata entry.",
        "operationId": "post_metadata",
        "requestBody": {
          "description": "Parameters of the metadata to post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metadataPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/metadata/{metadata_id}": {
      "put": {
        "tags": [
          "Metadata"
        ],
        "summary": "Updates an existing metadata entry",
        "description": "Updates existing metadata entry",
        "operationId": "put_metadata",
        "requestBody": {
          "description": "Parameters of the metadata to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/metadataPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadata"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Metadata"
        ],
        "summary": "Deletes a metadata entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_metadata",
        "parameters": [
          {
            "name": "metadata_id",
            "in": "path",
            "description": "Metadata ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Retrieves events",
        "description": "Retrieves details of events",
        "operationId": "get_events",
        "parameters": [
          {
            "name": "entity_id[]",
            "in": "query",
            "description": "Array of entity IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "asset_id[]",
            "in": "query",
            "description": "Return records with the asset identifiers provided.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location_id[]",
            "in": "query",
            "description": "An array of location IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event_type[]",
            "in": "query",
            "description": "An array of event types.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "transaction_id[]",
            "in": "query",
            "description": "An array of IDs for the business transaction.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "transaction_type[]",
            "in": "query",
            "description": "Array transaction types to retrieve records.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "step[]",
            "in": "query",
            "description": "Array of Business Step IDs",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event_start_timestamp",
            "in": "query",
            "description": "Returns results based on events on or after the provided timestamp.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_end_timestamp",
            "in": "query",
            "description": "Returns results based on events before the provided timestamp.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used for further retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/events"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Events"
        ],
        "summary": "Creates a new event entry.",
        "description": "Creates a new event entry.",
        "operationId": "post_event",
        "requestBody": {
          "description": "Parameters of the event to post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/events/{event_id}": {
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Updates an existing event entry",
        "description": "Updates existing event entry",
        "operationId": "put_events",
        "requestBody": {
          "description": "Parameters of the event to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/eventPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Events"
        ],
        "summary": "Deletes a event entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_event",
        "parameters": [
          {
            "name": "event_id",
            "in": "path",
            "description": "Event ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/assets": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "get_assets",
        "description": "Finds an asset of any type, whether it be a lot, serial, or EPC.",
        "operationId": "get_assets",
        "parameters": [
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_id[]",
            "in": "query",
            "description": "An array of EPC, lot or serial IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_type",
            "in": "query",
            "description": "An array of asset types.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "event_start_timestamp",
            "in": "query",
            "description": "Returns results based on events on or after the provided timestamp.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "event_end_timestamp",
            "in": "query",
            "description": "Returns results based on events before the provided timestamp.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used for further retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assets"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Creates a new asset entry.",
        "description": "Creates a new asset entry.",
        "operationId": "post_asset",
        "requestBody": {
          "description": "Parameters of the asset to post.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assetsPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/assets/{asset_id}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Updates an existing asset entry",
        "description": "Updates existing asset entry",
        "operationId": "put_assets",
        "requestBody": {
          "description": "Parameters of the event to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/assetsPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/event"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Deletes an asset entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_asset",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "Asset ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/assets/{asset_id}/trace": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "retrieve a trace for a specific lot, serial, or pallet",
        "description": "Retrieve a consumer trace for a specific lot, serial, or pallet\n",
        "operationId": "retrieveatraceforaspecificlot,serial,orpallet",
        "parameters": [
          {
            "name": "asset_id",
            "in": "path",
            "description": "EPC of lot, serial, pallet, or GRAI to trace",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "depth",
            "in": "query",
            "description": "Returns the number of steps to traverse in the trace.",
            "schema": {
              "maximum": 10,
              "exclusiveMaximum": false,
              "minimum": 1,
              "exclusiveMinimum": false,
              "type": "integer",
              "format": "int32",
              "default": 5
            }
          },
          {
            "name": "upstream",
            "in": "query",
            "description": "Boolean value indicating whether or not to trace upstream.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "downstream",
            "in": "query",
            "description": "Boolean value indicating whether or not to trace downstream.",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/assetsTraceResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      }
    },
    "/ilmds": {
      "get": {
        "tags": [
          "Assets"
        ],
        "summary": "Retrieves imld data",
        "description": "Retrieves imld data related to assets and products.",
        "operationId": "get_ilmds",
        "parameters": [
          {
            "name": "asset_id[]",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "best_before_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "best_before_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_freeze_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "first_freeze_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "harvest_start_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "harvest_start_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "harvest_end_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "harvest_end_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_expiration_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "item_expiration_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sell_by_date_start_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sell_by_date_end_timestamp",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "start",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ilmd data matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ilmds"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Assets"
        ],
        "summary": "Creates new ilmd entry",
        "description": "Creates new ilmd entry.",
        "operationId": "post_ilmds",
        "requestBody": {
          "description": "Object to submit post a new ilmds entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ilmdsPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "ilmd data matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ilmds"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/ilmds/{ilmds_id}": {
      "put": {
        "tags": [
          "Assets"
        ],
        "summary": "Updates an existing ilmds entry",
        "description": "Updates existing ilmds entry",
        "operationId": "put_ilmds",
        "requestBody": {
          "description": "Parameters of the ilmds record to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ilmdsPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ilmds"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Assets"
        ],
        "summary": "Deletes an ilmds entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_ilmds",
        "parameters": [
          {
            "name": "ilmds_id",
            "in": "path",
            "description": "Ilmds ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/entities": {
      "get": {
        "tags": [
          "Entities"
        ],
        "summary": "get_entities",
        "description": "Retrieves information for entities.\n",
        "operationId": "get_entities",
        "parameters": [
          {
            "name": "entity_id[]",
            "in": "query",
            "description": "Array of entity IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "entity_name[]",
            "in": "query",
            "description": "An array of entity names.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "company_prefix[]",
            "in": "query",
            "description": "An array of company prefixes.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_id[]",
            "in": "query",
            "description": "Array of EPC or relevant product identifiers.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "product_id[]",
            "in": "query",
            "description": "An array of product IDs.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "location_id[]",
            "in": "query",
            "description": "An array of location IDs to use in returning records.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A numerical limit to the number of records initially returned.  Paging can then be used for further retrieval. Default limit 500.",
            "schema": {
              "type": "number",
              "format": "double",
              "default": 500
            }
          },
          {
            "name": "startPage",
            "in": "query",
            "description": "Specifies the record number at which to start the page of results. The number of records returned will be based on the `limit` parameter.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entities"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Entities"
        ],
        "summary": "Creates new entity entry",
        "description": "Creates new entity entry.",
        "operationId": "post_entities",
        "requestBody": {
          "description": "Object to post a new entity entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entitiesPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "entity data matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entities"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/entities/{entity_id}": {
      "put": {
        "tags": [
          "Entities"
        ],
        "summary": "Updates an existing entity entry",
        "description": "Updates existing entity entry",
        "operationId": "put_entity",
        "requestBody": {
          "description": "Parameters of the entity record to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/entitiesPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/entity"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Entities"
        ],
        "summary": "Deletes an entity entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_entities",
        "parameters": [
          {
            "name": "entity_id",
            "in": "path",
            "description": "Entity ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    },
    "/sources": {
      "get": {
        "tags": [
          "Sources"
        ],
        "summary": "retrieve source material",
        "description": "Returns assets used as source materials for other assets.  For example, avocados used to make guacamole.",
        "operationId": "retrievesourcematerial",
        "parameters": [
          {
            "name": "asset_id[]",
            "in": "query",
            "description": "Returns records with the asset identifiers (URN) provided.",
            "required": true,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sources"
                }
              }
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "Sources"
        ],
        "summary": "Creates new source entry",
        "description": "Creates new source entry.",
        "operationId": "post_sources",
        "requestBody": {
          "description": "Object to post a new source entry.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sourcesPostRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "source data matching criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sources"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      }
    },
    "/sources/{source_id}": {
      "put": {
        "tags": [
          "Sources"
        ],
        "summary": "Updates an existing sources entry",
        "description": "Updates existing sources entry",
        "operationId": "put_source",
        "requestBody": {
          "description": "Parameters of the source record to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sourcesPutRequest"
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sources"
                }
              }
            }
          },
          "400": {
            "description": "bad input parameter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/errorModel"
                }
              }
            }
          }
        },
        "deprecated": false,
        "x-codegen-request-body-name": "Request Body"
      },
      "delete": {
        "tags": [
          "Sources"
        ],
        "summary": "Deletes an sources entry",
        "description": "Deletes the entry from the system.",
        "operationId": "delete_source",
        "parameters": [
          {
            "name": "source_id",
            "in": "path",
            "description": "Source ID",
            "required": true,
            "schema": {}
          }
        ],
        "responses": {
          "204": {
            "description": "No Content",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "403": {
            "description": "Forbidden",
            "content": {}
          },
          "404": {
            "description": "Not Found",
            "content": {}
          },
          "500": {
            "description": "Internal Server Error",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "assetQty": {
        "title": "assetQty",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          },
          "uom": {
            "type": "string"
          }
        }
      },
      "products": {
        "title": "products",
        "type": "object",
        "properties": {
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product"
            }
          },
          "next": {
            "$ref": "#/components/schemas/next"
          }
        }
      },
      "product": {
        "title": "product",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "object_sku": {
            "type": "string"
          }
        },
        "example": {
          "id": "urn:product:class:0048562.chicken",
          "entity_id": "string",
          "description": "Demo: fresh chicken",
          "object_sku": "03485JDSIJ"
        }
      },
      "locations": {
        "title": "locations",
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location"
            }
          },
          "next": {
            "$ref": "#/components/schemas/next"
          }
        }
      },
      "location": {
        "title": "location",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "location_type": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          },
          "location_name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "po_box_number": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "example": {
          "id": "9876543example",
          "entity_id": "string",
          "location_type": "FARM",
          "location_name": "Bia Orchards",
          "street_address": "123 Jakers Street",
          "city": "Middlefield",
          "country_code": "US",
          "po_box_number": null,
          "postal_code": "06455",
          "state": "CT",
          "latitude": 0,
          "longitude": 0
        }
      },
      "assets": {
        "title": "assets",
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/asset"
            }
          }
        }
      },
      "asset": {
        "title": "asset",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "example": {
          "id": "thisAssetID",
          "product_id": "productIDExample"
        }
      },
      "assetsPostRequest": {
        "title": "assetsPostRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asset_type": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "example": {
          "id": "thisAssetID",
          "asset_type": "pallet",
          "product_id": "productIDExample"
        }
      },
      "assetsPutRequest": {
        "title": "assetsPostRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "asset_type": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          }
        },
        "example": {
          "id": "thisAssetID",
          "asset_type": "pallet",
          "product_id": "productIDExample"
        }
      },
      "ilmdsPostRequest": {
        "title": "ilmdsPostRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ilmd"
            }
          }
        }
      },
      "ilmdsPutRequest": {
        "title": "ilmdsPutRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ilmd"
            }
          }
        }
      },
      "ilmds": {
        "title": "ilmds",
        "type": "object",
        "properties": {
          "ilmds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ilmd"
            }
          }
        }
      },
      "ilmd": {
        "title": "ilmd",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "product_id": {
            "type": "string"
          },
          "additional_trade_item_identification": {
            "type": "string"
          },
          "additional_trade_item_identification_type": {
            "type": "string"
          },
          "lot_number": {
            "type": "string"
          },
          "functional_name": {
            "type": "string"
          },
          "regulated_product_name": {
            "type": "string"
          },
          "trade_item_description": {
            "type": "string"
          },
          "strength_description": {
            "type": "string"
          },
          "net_content_description": {
            "type": "string"
          },
          "description_short": {
            "type": "string"
          },
          "label_description": {
            "type": "string"
          },
          "drained_weight": {
            "type": "string"
          },
          "drained_weight_uom": {
            "type": "string"
          },
          "gross_weight": {
            "type": "string"
          },
          "gross_weight_uom": {
            "type": "string"
          },
          "net_weight": {
            "type": "string"
          },
          "net_weight_uom": {
            "type": "string"
          },
          "manufacturer_of_trade_item_location_name": {
            "type": "string"
          },
          "country_of_origin": {
            "type": "string"
          },
          "sell_by_date": {
            "type": "string"
          },
          "first_freeze_date": {
            "type": "string"
          },
          "item_expiration_date": {
            "type": "string"
          },
          "best_before_date": {
            "type": "string"
          },
          "harvest_start_date": {
            "type": "string"
          },
          "harvest_end_date": {
            "type": "string"
          },
          "farm_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/farm"
            }
          },
          "growing_method_code": {
            "type": "string"
          },
          "production_method_for_fish_and_seafood": {
            "type": "string"
          },
          "unloading_port": {
            "type": "string"
          },
          "vessel_list": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/vessel"
            }
          }
        }
      },
      "farm": {
        "title": "farm",
        "type": "object",
        "properties": {
          "identification": {
            "type": "string"
          },
          "identification_type": {
            "type": "string"
          }
        }
      },
      "vessel": {
        "title": "vessel",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "productsPostRequest": {
        "title": "productsPostRequest",
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "description": {
            "type": "string"
          },
          "asset_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "productsPutRequest": {
        "title": "productsPutRequest",
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "description": {
            "type": "string"
          },
          "asset_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "locationsPostRequest": {
        "title": "locationsPostRequest",
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string"
          },
          "location_type": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          },
          "location_name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "po_box_number": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "example": {
          "entity_id": "string",
          "location_type": "FARM",
          "location_name": "Bia Orchards",
          "street_address": "123 Jakers Street",
          "city": "Kimberton",
          "country_code": "US",
          "po_box_number": null,
          "postal_code": "19460",
          "state": "PA",
          "latitude": 0,
          "longitude": 0
        }
      },
      "locationsPutRequest": {
        "title": "locationsPutRequest",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "location_type": {
            "type": "string"
          },
          "street_address": {
            "type": "string"
          },
          "location_name": {
            "type": "string"
          },
          "city": {
            "type": "string"
          },
          "country_code": {
            "type": "string"
          },
          "po_box_number": {
            "type": "string"
          },
          "postal_code": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "example": {
          "id": "9876543example",
          "entity_id": "string",
          "location_type": "FARM",
          "location_name": "Bia Orchards",
          "street_address": "123 Jakers Street",
          "city": "Kimberton",
          "country_code": "US",
          "po_box_number": null,
          "postal_code": "19460",
          "state": "PA",
          "latitude": 0,
          "longitude": 0
        }
      },
      "metadataPostRequest": {
        "title": "metadataPostRequest",
        "type": "object",
        "properties": {
          "entity_id": {
            "type": "string"
          },
          "metadata_timestamp": {
            "type": "string"
          },
          "metadata_content_type": {
            "type": "string"
          },
          "event_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asset_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "type": "object",
            "properties": {}
          }
        },
        "example": {
          "metadata_timestamp": "2019-03-13T14:52:48.350Z",
          "metadata_content_type": "shipping delay",
          "product_ids": [
            "42354754jk5k345"
          ],
          "location_ids": [
            "923901832"
          ],
          "customData": {
            "description": "Shipment was delayed for two days due to a weather system.",
            "spoilageRisk": "high"
          }
        }
      },
      "metadataPutRequest": {
        "title": "metadataPutRequest",
        "type": "object",
        "properties": {
          "metadata_id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "metadata_timestamp": {
            "type": "string"
          },
          "metadata_content_type": {
            "type": "string"
          },
          "event_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asset_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "type": "object",
            "properties": {}
          }
        },
        "example": {
          "metadata_id": "3jh43u2i5u3i4",
          "metadata_timestamp": "2019-03-13T14:52:48.350Z",
          "metadata_content_type": "shipping delay",
          "product_ids": [
            "42354754jk5k345"
          ],
          "location_ids": [
            "923901832"
          ],
          "customData": {
            "description": "Shipment was delayed for two days due to a weather system.",
            "spoilageRisk": "low"
          }
        }
      },
      "metadata": {
        "title": "metadata",
        "type": "object",
        "properties": {
          "metadata_id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "metadata_timestamp": {
            "type": "string"
          },
          "metadata_content_type": {
            "type": "string"
          },
          "event_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asset_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customData": {
            "type": "object",
            "properties": {}
          }
        },
        "example": {
          "metadata_id": "3jh43u2i5u3i4",
          "metadata_timestamp": "2019-03-13T14:52:48.350Z",
          "metadata_content_type": "shipping delay",
          "product_ids": [
            "42354754jk5k345"
          ],
          "location_ids": [
            "923901832"
          ],
          "customData": {
            "description": "Shipment was delayed for two days due to a weather system.",
            "spoilageRisk": "low"
          }
        }
      },
      "events": {
        "title": "events",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "next": {
            "$ref": "#/components/schemas/next"
          }
        }
      },
      "event": {
        "title": "event",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "entity_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string",
            "description": "observation, transformation, aggregation, disaggregation, commission, decommission,",
            "example": "aggregation"
          },
          "event_time": {
            "type": "string"
          },
          "transformation_id": {
            "type": "string"
          },
          "biz_step": {
            "type": "string"
          },
          "disposition": {
            "type": "string"
          },
          "read_point_location_id": {
            "type": "string"
          },
          "read_point_sub_location_id": {
            "type": "string"
          },
          "biz_location_id": {
            "type": "string"
          },
          "biz_sub_location_id": {
            "type": "string"
          },
          "asset_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "parent_asset_id": {
            "type": "string",
            "description": "applies to aggregation and disaggregation events"
          },
          "child_asset_ids": {
            "type": "array",
            "description": "applies to aggregation and disaggregation events",
            "items": {
              "type": "string"
            }
          },
          "quantities": {
            "type": "object"
          }
        }
      },
      "da_line_items": {
        "title": "da_line_items",
        "type": "object",
        "properties": {
          "product_id": {
            "type": "string"
          },
          "trade_item": {
            "$ref": "#/components/schemas/da_trade_item"
          },
          "line_item_number": {
            "type": "number"
          },
          "country_of_origin": {
            "type": "string"
          },
          "quantity": {
            "type": "number"
          },
          "uom": {
            "type": "string"
          },
          "requested_product_id": {
            "type": "string"
          },
          "purchase_order": {
            "$ref": "#/components/schemas/da_logistic_units_po"
          }
        }
      },
      "da_trade_item": {
        "title": "da_trade_item",
        "type": "object",
        "properties": {
          "item_data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemDatum"
            },
            "description": ""
          }
        }
      },
      "da_logistic_units_po": {
        "title": "da_logistic_units_po",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "line_item_number": {
            "type": "number"
          },
          "creation_timestamp": {
            "type": "string"
          }
        }
      },
      "da_logistic_units": {
        "title": "da_logistic_units",
        "type": "object",
        "properties": {
          "estimated_delivery_timestamp_at_consignee": {
            "type": "string"
          },
          "logistic_unit_identification": {
            "$ref": "#/components/schemas/logistic_unit_identification"
          },
          "package_type_code": {
            "type": "string"
          },
          "line_items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/da_line_items"
            }
          }
        }
      },
      "logistic_unit_identification": {
        "title": "logistic_unit_identification",
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "eventPostRequest": {
        "title": "eventPostRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          }
        },
        "example": {
          "entity_id": "12entity34",
          "event_type": "observation",
          "event_time": "2019-03-13T14:52:48.350Z",
          "transformation_id": "exampleIDforTransformation",
          "asset_ids": [
            "asset0",
            "asset1"
          ],
          "parent_asset_id": "parentAssetIDExample",
          "quantities": {
            "asset_id": "assetIDexample",
            "quantity": 130,
            "uom": "uomExample"
          },
          "source_location_ids": [
            "locationID1",
            "locationID2"
          ],
          "destination_location_ids": [
            "destinationID1",
            "ldestinationID2"
          ],
          "transaction_ids": [
            "transaction1",
            "transaction2"
          ]
        }
      },
      "eventPutRequest": {
        "title": "eventPostRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          }
        },
        "example": {
          "event_id": "eventIDexample",
          "entity_id": "12entity34",
          "event_type": "observation",
          "event_time": "2019-03-13T14:52:48.350Z",
          "transformation_id": "exampleIDforTransformation",
          "asset_ids": [
            "asset0",
            "asset1"
          ],
          "parent_asset_id": "parentAssetIDExample",
          "quantities": {
            "asset_id": "assetIDexample",
            "quantity": 130,
            "uom": "uomExample"
          },
          "source_location_ids": [
            "locationID1",
            "locationID2"
          ],
          "destination_location_ids": [
            "destinationID1",
            "ldestinationID2"
          ],
          "transaction_ids": [
            "transaction1",
            "transaction2"
          ]
        }
      },
      "next": {
        "title": "next",
        "type": "object",
        "properties": {
          "href": {
            "type": "string"
          }
        },
        "example": {
          "href": "http://[examples]/oft/api/outbound/v1/PATH?&start=TOKEN"
        }
      },
      "trace": {
        "title": "trace",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/traceEvent"
            }
          },
          "output_assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/innerTrace"
            }
          },
          "input_assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/innerTrace"
            }
          },
          "parent_assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/innerTrace"
            }
          },
          "child_assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/innerTrace"
            }
          }
        }
      },
      "innerTrace": {
        "title": "innerTrace",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "output_assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "input_assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "parent_assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          },
          "child_assets": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {}
            }
          }
        }
      },
      "consumerTrace": {
        "title": "consumerTrace",
        "type": "object",
        "properties": {
          "trace": {
            "$ref": "#/components/schemas/trace"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/event"
            }
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/product"
            }
          },
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/location"
            }
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/assets"
            }
          },
          "metadata": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/metadata"
            }
          }
        }
      },
      "traceEvent": {
        "title": "traceEvent",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          }
        }
      },
      "errorModel": {
        "title": "errorModel",
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "transactionIds": {
        "title": "transactionIds",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "sourcesPostRequest": {
        "title": "sourcesPostRequest",
        "type": "object",
        "properties": {
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sources"
            }
          }
        },
        "example": {
          "asset_ids": [
            "GuacamoleIDexample"
          ],
          "sources": [
            "avacadoIDexample",
            "cilantroIDexample"
          ]
        }
      },
      "sourcesPutRequest": {
        "title": "sourcesPostRequest",
        "type": "object",
        "properties": {
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sources"
            }
          }
        },
        "example": {
          "asset_ids": [
            "Guacamole"
          ],
          "sources": [
            "avacadoIDexample",
            "cilantroIDexample"
          ]
        }
      },
      "sources": {
        "title": "sources",
        "type": "object",
        "properties": {
          "asset_ids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AssetId"
            }
          },
          "sources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sources1"
            }
          }
        }
      },
      "entities": {
        "title": "entities",
        "type": "object",
        "properties": {
          "entities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/entity"
            }
          }
        }
      },
      "entitiesPostRequest": {
        "title": "eventPostRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/entity"
            }
          }
        },
        "example": {
          "name": "CJ Berries",
          "company_prefix": "CJB",
          "asset_id": "assetIDexample",
          "product_id": "prodIDexample",
          "location_id": "locationIDexample"
        }
      },
      "entitiesPutRequest": {
        "title": "eventPostRequest",
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/entity"
            }
          }
        },
        "example": {
          "id": "entityIDexample",
          "name": "CJ Berries",
          "company_prefix": "CJB",
          "asset_id": "assetIDexample",
          "product_id": "prodIDexample",
          "location_id": "locationIDexample"
        }
      },
      "entity": {
        "title": "entity",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "company_prefix": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "asset_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "product_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "location_id": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "invoices": {
        "title": "invoices",
        "type": "object",
        "properties": {
          "invoices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/invoice"
            }
          }
        }
      },
      "invoice": {
        "title": "invoice",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string"
          },
          "asset_id": {
            "type": "string"
          },
          "creation_timestamp": {
            "type": "string"
          },
          "buyer_location_id": {
            "type": "string"
          },
          "seller_location_id": {
            "type": "string"
          },
          "payer_location_id": {
            "type": "string"
          },
          "payee_location_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "totals": {
            "$ref": "#/components/schemas/Totals"
          },
          "delivery_terms": {
            "$ref": "#/components/schemas/DeliveryTerms"
          },
          "line_items": {
            "$ref": "#/components/schemas/LineItems"
          },
          "levied_duty_fee_tax": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LeviedDutyFeeTax"
            }
          },
          "item_price_exclusive_allowances_charges": {
            "$ref": "#/components/schemas/ItemPriceExclusiveAllowancesCharges"
          },
          "extension": {
            "$ref": "#/components/schemas/Extension"
          },
          "purchase_order": {
            "$ref": "#/components/schemas/da_logistic_units_po"
          },
          "product_id": {
            "type": "string"
          },
          "item_price_base_quantity": {
            "$ref": "#/components/schemas/ItemPriceBaseQuantity1"
          },
          "despatch_advice": {
            "$ref": "#/components/schemas/ra_line_items_da"
          },
          "line_item_number": {
            "type": "number",
            "format": "double"
          },
          "invoiced_quantity": {
            "$ref": "#/components/schemas/InvoicedQuantity"
          }
        }
      },
      "AssetId": {
        "title": "AssetId",
        "type": "object",
        "properties": {
          "asset_id": {
            "type": "string"
          },
          "hash": {
            "type": "string"
          }
        }
      },
      "CurrencyExchangeRateInformation": {
        "title": "CurrencyExchangeRateInformation",
        "type": "object",
        "properties": {
          "conversion_from_code": {
            "type": "string"
          },
          "exchange_rate": {
            "type": "number",
            "format": "double"
          },
          "conversion_to_code": {
            "type": "string"
          }
        }
      },
      "DeliveryTerms": {
        "title": "DeliveryTerms",
        "type": "object",
        "properties": {
          "incoterms_code": {
            "type": "string"
          },
          "location_id": {
            "type": "object",
            "properties": {}
          },
          "alternate_terms": {
            "type": "object",
            "properties": {}
          },
          "cost_payment": {
            "type": "string"
          },
          "instructions": {
            "type": "string"
          }
        }
      },
      "assetsTraceResponse": {
        "title": "assetsTraceResponse",
        "type": "object",
        "properties": {
          "trace": {
            "$ref": "#/components/schemas/trace"
          }
        }
      },
      "Error": {
        "title": "Error",
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "invalid_inputs"
          },
          "message": {
            "type": "string",
            "example": "Invalid value 10000 provided for input parameter limit. limit must be an integer greater than or equal to 1 and less than or equal to 1000."
          },
          "more_info": {
            "type": "string"
          }
        }
      },
      "Extension": {
        "title": "Extension",
        "type": "object",
        "properties": {
          "currency_exchange_rate_information": {
            "$ref": "#/components/schemas/CurrencyExchangeRateInformation"
          }
        }
      },
      "InvoicedQuantity": {
        "title": "InvoicedQuantity",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          }
        }
      },
      "ra_line_items_da": {
        "title": "ra_line_items_da",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "line_item_number": {
            "type": "number"
          }
        }
      },
      "ItemDatum": {
        "title": "ItemDatum",
        "type": "object",
        "properties": {
          "item_volume": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemVolume"
            }
          },
          "best_before_timestamp": {
            "type": "string"
          },
          "lot_number": {
            "type": "string"
          },
          "item_weight": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemWeight"
            }
          },
          "batch_number": {
            "type": "string"
          }
        }
      },
      "ItemPriceBaseQuantity": {
        "title": "ItemPriceBaseQuantity",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          }
        }
      },
      "ItemPriceBaseQuantity1": {
        "title": "ItemPriceBaseQuantity1",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          }
        }
      },
      "ItemPriceExclusiveAllowancesCharges": {
        "title": "ItemPriceExclusiveAllowancesCharges",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency_code": {
            "type": "string"
          }
        }
      },
      "ItemVolume": {
        "title": "ItemVolume",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "measurement": {
            "type": "string"
          },
          "measurement_type_code": {
            "type": "string"
          }
        }
      },
      "ItemWeight": {
        "title": "ItemWeight",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "measurement": {
            "type": "string"
          },
          "measurement_type_code": {
            "type": "string"
          }
        }
      },
      "LeviedDutyFeeTax": {
        "title": "LeviedDutyFeeTax",
        "type": "object",
        "properties": {
          "tax_percentage": {
            "type": "string"
          },
          "tax_amount": {
            "$ref": "#/components/schemas/TaxAmount"
          },
          "tax_type_code": {
            "type": "string"
          }
        }
      },
      "LineItems": {
        "title": "LineItems",
        "type": "object",
        "properties": {
          "ordered_quantity": {
            "$ref": "#/components/schemas/OrderedQuantity"
          }
        }
      },
      "NetPrice": {
        "title": "NetPrice",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency_code": {
            "type": "string"
          }
        }
      },
      "Note": {
        "title": "Note",
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          },
          "language_code": {
            "type": "string"
          }
        }
      },
      "OrderedQuantity": {
        "title": "OrderedQuantity",
        "type": "object",
        "properties": {
          "uom": {
            "type": "string"
          },
          "quantity": {
            "type": "string"
          }
        }
      },
      "Sources1": {
        "title": "Sources1",
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          },
          "source": {
            "type": "string"
          }
        }
      },
      "TaxAmount": {
        "title": "TaxAmount",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency_code": {
            "type": "string"
          }
        }
      },
      "TaxSubtotal": {
        "title": "TaxSubtotal",
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency_code": {
            "type": "string"
          }
        }
      },
      "Totals": {
        "title": "Totals",
        "type": "object",
        "properties": {
          "tax_subtotal": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaxSubtotal"
            }
          }
        }
      },
      "TransportInformation": {
        "title": "TransportInformation",
        "type": "object",
        "properties": {
          "bill_of_lading_number": {
            "type": "string"
          },
          "transport_means_id": {
            "type": "string"
          }
        }
      },
      "TransportInformation1": {
        "title": "TransportInformation1",
        "type": "object",
        "properties": {
          "transport_means_id": {
            "type": "string"
          }
        }
      }
    }
  }
}